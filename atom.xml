<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ColinWangBlog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-03-15T15:16:59.645Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Colin Wang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2019/03/13/hello-world/"/>
    <id>http://yoursite.com/2019/03/13/hello-world/</id>
    <published>2019-03-13T02:52:54.015Z</published>
    <updated>2019-03-15T15:16:59.645Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      hexo指导
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JS 里的数据类型</title>
    <link href="http://yoursite.com/2018/12/13/JS%20%E9%87%8C%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <id>http://yoursite.com/2018/12/13/JS 里的数据类型/</id>
    <published>2018-12-13T05:05:07.000Z</published>
    <updated>2019-03-17T15:35:08.090Z</updated>
    
    <content type="html"><![CDATA[<p>JavaScript 语言的每一个值，都属于某一种数据类型。JavaScript 的数据类型，共有六种。</p><ul><li>数值（number）：整数和小数（比如<code>1</code>和<code>3.14</code>）</li><li>字符串（string）：文本（比如<code>Hello World</code>）。</li><li>布尔值（boolean）：表示真伪的两个特殊值，即<code>true</code>（真）和<code>false</code>（假）</li><li><code>undefined</code>：表示“未定义”或不存在，即由于目前没有定义，所以此处暂时没有任何值</li><li><code>null</code>：表示空值，即此处的值为空。</li><li>对象（object）：各种值组成的集合。</li></ul><p>通常，数值、字符串、布尔值这三种类型，合称为原始类型（primitive type）的值，即它们是最基本的数据类型，不能再细分了。对象则称为合成类型（complex type）的值，因为一个对象往往是多个原始类型的值的合成，可以看作是一个存放各种值的容器。至于undefined和null，一般将它们看成两个特殊值。<br>对象可以分成三类：</p><ul><li>狭义的对象（object）</li><li>数组（array）</li><li>函数（function）</li></ul><hr><p>关于typeof运算符<br><code>typeof</code>运算符可以返回一个值的数据类型。<br>数值、字符串、布尔值分别返回<code>number</code>、<code>string</code>、<code>boolean</code>。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">typeof 123 // &quot;number&quot;</span><br><span class="line">typeof &apos;123&apos; // &quot;string&quot;</span><br><span class="line">typeof false // &quot;boolean&quot;</span><br></pre></td></tr></table></figure></p><p>函数返回<code>function</code>。（函数属于对象的一种，理论应该返回<code>object</code>，但是js里是返回<code>function</code>，算是bug）</p><p><code>undefined</code>返回<code>undefined</code>。</p><p>利用这一点，<code>typeof</code>可以用来检查一个没有声明的变量，而不报错。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a</span><br><span class="line">// ReferenceError: v is not defined</span><br><span class="line"></span><br><span class="line">typeof a</span><br><span class="line">// &quot;undefined&quot;</span><br></pre></td></tr></table></figure></p><p>上面代码中，变量<code>a</code>没有用<code>var</code>命令声明，直接使用就会报错。但是，放在<code>typeof</code>后面，就不报错了，而是返回<code>undefined</code>。</p><p>对象返回<code>object</code>。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">typeof window // &quot;object&quot;</span><br><span class="line">typeof &#123;&#125; // &quot;object&quot;</span><br><span class="line">typeof [] // &quot;object&quot;</span><br></pre></td></tr></table></figure></p><p><code>null</code>返回<code>object</code>。（实际上<code>null</code>的类型就是<code>null</code>，返回<code>object</code>也算是bug）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">typeof null // &quot;object&quot;</span><br></pre></td></tr></table></figure></p><p><code>null</code>返回的类型是<code>object</code>，这是由于历史原因造成的。1995年的 JavaScript 语言第一版，只设计了五种数据类型（对象、整数、浮点数、字符串和布尔值），没考虑<code>null</code>，只把它当作<code>object</code>的一种特殊值。后来<code>null</code>独立出来，作为一种单独的数据类型，为了兼容以前的代码，<code>typeof null</code>返回<code>object</code>就没法改变了。</p><hr><h3 id="一、数值（number）"><a href="#一、数值（number）" class="headerlink" title="一、数值（number）"></a>一、数值（number）</h3><ol><li>关于数值的进制<br>使用字面量（literal）直接表示一个数值时，JavaScript 对整数提供四种进制的表示方法：十进制、十六进制、八进制、二进制。</li></ol><ul><li>十进制：没有前导0的数值。</li><li>八进制：有前缀<code>0o</code>或<code>0O</code>的数值，或者有前导0、且只用到0-7的八个阿拉伯数字的数值。</li><li>十六进制：有前缀<code>0x</code>或<code>0X</code>的数值。</li><li>二进制：有前缀<code>0b</code>或<code>0B</code>的数值。</li></ul><p>默认情况下，JavaScript 内部会自动将八进制、十六进制、二进制转为十进制。<br>如果八进制、十六进制、二进制的数值里面，出现不属于该进制的数字，就会报错。</p><ol start="2"><li>关于NaN<br>NaN是 JavaScript 的特殊值，表示“非数字”（Not a Number），主要出现在将字符串解析成数字出错的场合。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2 - &apos;w&apos;  //报错</span><br></pre></td></tr></table></figure></li></ol><p>上面代码运行时，会自动将字符串<code>x</code>转为数值，但是由于<code>x</code>不是数值，所以最后得到结果为<code>NaN</code>，表示它是“非数字”（<code>NaN</code>）。<br><code>NaN</code>不是独立的数据类型，而是一个特殊数值，它的数据类型依然属于<code>Number</code>。<br><code>NaN</code>不等于任何值，包括它本身。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NaN === NaN //  false</span><br></pre></td></tr></table></figure></p><hr><h3 id="二、字符串（string）"><a href="#二、字符串（string）" class="headerlink" title="二、字符串（string）"></a>二、字符串（string）</h3><ol><li>定义<br>字符串就是零个或多个排在一起的字符，放在单引号或双引号之中。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&apos;bbb&apos;</span><br><span class="line">&quot;aaa&quot;</span><br></pre></td></tr></table></figure></li></ol><p>单引号字符串的内部，可以使用双引号。双引号字符串的内部，可以使用单引号。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&quot;&apos;key&apos; = value&quot;</span><br><span class="line">&apos;hello &quot;world&quot; yeah&apos;</span><br></pre></td></tr></table></figure></p><p>如果要在单引号字符串的内部，使用单引号，就必须在内部的单引号前面加上反斜杠，用来转义。双引号字符串内部使用双引号，也是如此。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&apos;go go \&apos;go\&apos;&apos;    //&quot;go go &apos;go&apos;&quot;</span><br></pre></td></tr></table></figure></p><p>注意，转义符<code>\</code>与后面的任何字符数字都只算一个length，转义符也可以转转义本身。<code>\\</code><br>空字符串<code>&#39;&#39;</code>和空格字符串<code>&#39; &#39;</code>是不一样的，前者length为0，后者为1。</p><p>如果长字符串必须分成多行，可以在每一行的尾部使用反斜杠。（不建议这种方法）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var a =&apos;a\</span><br><span class="line">c\</span><br><span class="line">e&apos;;</span><br></pre></td></tr></table></figure></p><p>输出的时候还是单行，效果与写在同一行完全一样。注意，反斜杠的后面必须是换行符，而不能有其他字符（比如空格），否则会报错。</p><p>连接运算符（<code>+</code>）可以连接多个单行字符串，将长字符串拆成多行书写，输出的时候也是单行。(分成多行建议这种方法)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var b =&apos;a&apos;</span><br><span class="line">+&apos;c&apos;</span><br><span class="line">+&apos;f&apos;;</span><br></pre></td></tr></table></figure></p><hr><h3 id="三、布尔值-Boolean"><a href="#三、布尔值-Boolean" class="headerlink" title="三、布尔值(Boolean)"></a>三、布尔值(Boolean)</h3><p>布尔值代表“真”和“假”两个状态。“真”用关键字true表示，“假”用关键字false表示。布尔值只有这两个值。</p><p>相与运算符<code>&amp;&amp;</code><br><code>a&amp;&amp;b</code>必须要a和b同时为<code>true</code>或者<code>false</code>,结果才会是<code>true</code> <code>false</code>；</p><h2 id="或运算符-只要a或者b有一个是true时，结果就是true-只有当ab同时为false时，结果才是false。"><a href="#或运算符-只要a或者b有一个是true时，结果就是true-只有当ab同时为false时，结果才是false。" class="headerlink" title="或运算符|| 只要a或者b有一个是true时，结果就是true,只有当ab同时为false时，结果才是false。"></a>或运算符<code>||</code> 只要a或者b有一个是<code>true</code>时，结果就是<code>true</code>,只有当ab同时为<code>false</code>时，结果才是<code>false</code>。</h2><h3 id="四、null-和-undefined"><a href="#四、null-和-undefined" class="headerlink" title="四、null 和 undefined"></a>四、null 和 undefined</h3><p>null与undefined都可以表示“没有”，含义非常相似。将一个变量赋值为undefined或null，都表示什么都没有。<br>区别：</p><ul><li>变量没有被赋值 ——&gt;undefined  声明了但是没有定义的变量 </li><li>var obj = null ——&gt;null  空对象</li></ul><hr><h3 id="五、对象-object"><a href="#五、对象-object" class="headerlink" title="五、对象(object)"></a>五、对象(object)</h3><ol><li>生成方法<br>对象（object）是 JavaScript 语言的核心概念，也是最重要的数据类型。对象就是一组“键值对”（key-value）的集合，是一种无序的复合数据集合。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var obj = &#123;</span><br><span class="line">  foo: &apos;Hello&apos;,</span><br><span class="line">  bar: &apos;World&apos;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol><p>上面代码中，大括号就定义了一个对象，它被赋值给变量<code>obj</code>，所以变量<code>obj</code>就指向一个对象。该对象内部包含两个键值对（又称为两个“成员”），第一个键值对是<code>foo: &#39;Hello&#39;</code>，其中<code>foo</code>是“键名”（成员的名称），字符串<code>Hello</code>是“键值”（成员的值）。键名与键值之间用冒号分隔。第二个键值对是<code>bar: &#39;World&#39;</code>，<code>bar</code>是键名，<code>World</code>是键值。两个键值对之间用逗号分隔。</p><ol start="2"><li><p>键名<br>对象的所有键名都是字符串，所以加不加引号都可以。如果键名是数值，会被自动转为字符串。<br>如果键名不符合标识名的条件（比如第一个字符为数字，或者含有空格或运算符），且也不是数字，则必须加上引号，否则会报错。<br>对象的每一个键名又称为“属性”（property），它的“键值”可以是任何数据类型。如果一个属性的值为函数，通常把这个属性称为“方法”，它可以像函数那样调用。</p></li><li><p>属性的读取<br>读取对象的属性，有两种方法，一种是使用点运算符，还有一种是使用方括号运算符。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var obj = &#123;</span><br><span class="line">  p: &apos;Hello&apos;</span><br><span class="line">&#125;;</span><br><span class="line">obj.p // &quot;Hello&quot;</span><br><span class="line">obj[&apos;p&apos;] // &quot;Hello&quot;</span><br></pre></td></tr></table></figure></li></ol><p>上面代码分别采用点运算符和方括号运算符，读取属性<code>p</code>。<br>注意，如果使用方括号运算符，键名必须放在引号里面，否则会被当作变量处理。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var f = &apos;b&apos;;</span><br><span class="line"></span><br><span class="line">var obj = &#123;</span><br><span class="line">  f: 1,</span><br><span class="line">  b: 2</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">obj.f  // 1</span><br><span class="line">obj[f]  // 2</span><br></pre></td></tr></table></figure></p><p>上面代码中，引用对象<code>obj</code>的<code>f</code>属性时，如果使用点运算符，<code>f</code>就是字符串；如果使用方括号运算符，但是不使用引号，那么<code>f</code>就是一个变量，指向字符串<code>b</code>。</p><p>方括号运算符内部还可以使用表达式。数字键可以不加引号，因为会自动转成字符串。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">obj[&apos;hello&apos; + &apos; world&apos;]</span><br><span class="line">obj[3 + 3]</span><br></pre></td></tr></table></figure></p><p>注意，数值键名不能使用点运算符（因为会被当成小数点），只能使用方括号运算符。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var obj = &#123;</span><br><span class="line">  123: &apos;hello world&apos;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">obj.123 // 报错</span><br><span class="line">obj[123] // &quot;hello world&quot;</span><br></pre></td></tr></table></figure></p><p>上面代码的第一个表达式，对数值键名<code>123</code>使用点运算符，结果报错。第二个表达式使用方括号运算符，结果就是正确的。</p><ol start="4"><li><p>属性的查看<br>查看一个对象本身的所有属性，可以使用<code>Object.keys</code>方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var obj = &#123;</span><br><span class="line">  key1: 1,</span><br><span class="line">  key2: 2</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Object.keys(obj);</span><br><span class="line">// [&apos;key1&apos;, &apos;key2&apos;]</span><br></pre></td></tr></table></figure></li><li><p>属性的删除：delete 命令<br><code>delete</code>命令用于删除对象的属性，删除成功后返回<code>true</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var obj = &#123; p: 1 &#125;;</span><br><span class="line">Object.keys(obj) // [&quot;p&quot;]</span><br><span class="line"></span><br><span class="line">delete obj.p // true</span><br><span class="line">obj.p // undefined</span><br><span class="line">Object.keys(obj) // []</span><br></pre></td></tr></table></figure></li></ol><p>上面代码中，<code>delete</code>命令删除对象<code>obj</code>的<code>p</code>属性。删除后，再读取<code>p</code>属性就会返回<code>undefined</code>，而且<code>Object.keys</code>方法的返回值也不再包括该属性。<br>注意，删除一个不存在的属性，<code>delete</code>不报错，而且返回<code>true</code>。因此，不能根据delete命令的结果，认定某个属性是存在的。<br>只有一种情况，<code>delete</code>命令会返回<code>false</code>，那就是该属性存在，且不得删除。</p><ol start="6"><li><p>属性是否存在：in 运算符<br><code>in</code>运算符用于检查对象是否包含某个属性（注意，检查的是键名，不是键值），如果包含就返回<code>true</code>，否则返回<code>false</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var obj = &#123; a: 1 &#125;;</span><br><span class="line">&apos;a&apos; in obj // true</span><br></pre></td></tr></table></figure></li><li><p>属性的遍历：for…in 循环<br><code>for...in</code>循环用来遍历一个对象的全部属性。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var obj = &#123;a: 1, b: 2&#125;;</span><br><span class="line"></span><br><span class="line">for (var key in obj) &#123;</span><br><span class="line">  console.log(key);</span><br><span class="line">  console.log(obj[key]);</span><br><span class="line">&#125;</span><br><span class="line">//  a</span><br><span class="line">//  1</span><br><span class="line">//  b</span><br><span class="line">//  2</span><br></pre></td></tr></table></figure></li></ol><p>注意，遍历出的顺序并不一定是按照对象内部的顺序排列的。它遍历的是对象所有可遍历（enumerable）的属性，会跳过不可遍历的属性。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;JavaScript 语言的每一个值，都属于某一种数据类型。JavaScript 的数据类型，共有六种。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数值（number）：整数和小数（比如&lt;code&gt;1&lt;/code&gt;和&lt;code&gt;3.14&lt;/code&gt;）&lt;/li&gt;
&lt;li&gt;字符串（strin
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>CSS经常用到的东西</title>
    <link href="http://yoursite.com/2018/11/29/CSS%E7%BB%8F%E5%B8%B8%E7%94%A8%E5%88%B0%E7%9A%84%E4%B8%9C%E8%A5%BF/"/>
    <id>http://yoursite.com/2018/11/29/CSS经常用到的东西/</id>
    <published>2018-11-29T08:58:07.000Z</published>
    <updated>2019-03-16T15:20:12.395Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、左右布局"><a href="#一、左右布局" class="headerlink" title="一、左右布局"></a>一、左右布局</h3><h5 id="1-float属性实现左右布局"><a href="#1-float属性实现左右布局" class="headerlink" title="1.float属性实现左右布局"></a>1.float属性实现左右布局</h5><p>float属性是css中关于布局的一个关键属性，其意为将该块状区域脱离父级标签的文档流，left属性值使该区域向父级标签区域的左侧边界放置，right属性值使该区域块向父级标签的右侧边界放置。float区域块不会被父级区域块包裹，造成前端常见的高度塌陷问题，解决办法是清除浮动。<br>代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;two&lt;/title&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">* &#123;</span><br><span class="line">margin: 0;</span><br><span class="line">padding: 0;</span><br><span class="line">&#125;</span><br><span class="line">.right &#123;</span><br><span class="line">float: right;</span><br><span class="line">height: 500px;</span><br><span class="line">width: 200px;</span><br><span class="line">background-color: yellow;</span><br><span class="line">&#125;</span><br><span class="line">.left &#123;</span><br><span class="line">height: 500px;</span><br><span class="line">background-color: red;</span><br><span class="line">margin-right: 230px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body class=&quot;clearfix&quot;&gt;</span><br><span class="line">&lt;div class=&quot;right&quot;&gt;我是固定宽高&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;left&quot;&gt;我是自适应&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><p>以上代码展示出来的是这样的<img src="https://upload-images.jianshu.io/upload_images/7017681-4865e60f81ca34cd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="左右布局.png"><br>红色区域会随着浏览器的宽度而自适应，黄色则会保持固定宽高。<br>而为了清除浮动，需要在加了float属性的元素的父级元素上加清除浮动，比如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.clearfix::after&#123;</span><br><span class="line">  content: &apos;&apos;;</span><br><span class="line">  display: block;</span><br><span class="line">  clear: both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><h3 id="二、左中右布局"><a href="#二、左中右布局" class="headerlink" title="二、左中右布局"></a>二、左中右布局</h3><h5 id="1-float属性实现左中右布局"><a href="#1-float属性实现左中右布局" class="headerlink" title="1.float属性实现左中右布局"></a>1.float属性实现左中右布局</h5><p>float属性同样也可以实现左中右布局。<br>代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;three&lt;/title&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">* &#123;</span><br><span class="line">margin: 0;</span><br><span class="line">padding: 0;</span><br><span class="line">&#125;</span><br><span class="line">.left &#123;</span><br><span class="line">float: left;</span><br><span class="line">background: blue;</span><br><span class="line">height: 500px;</span><br><span class="line">width: 200px;</span><br><span class="line">&#125;</span><br><span class="line">.right &#123;</span><br><span class="line">float: right;</span><br><span class="line">background-color:yellow;</span><br><span class="line">height: 500px;</span><br><span class="line">width: 200px;</span><br><span class="line">&#125;</span><br><span class="line">.center &#123;</span><br><span class="line">height: 500px;</span><br><span class="line">background-color: red;</span><br><span class="line">                        margin-left: 200px;</span><br><span class="line">margin-right: 200px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div class=&quot;left&quot;&gt;我是固定宽高&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;right&quot;&gt;我是固定宽高2&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;center&quot;&gt;我是自适应&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><p>以上代码展示出来的是这样的：<img src="https://upload-images.jianshu.io/upload_images/7017681-db9b30792725b6df.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="左中右布局"></p><hr><h3 id="三、水平居中"><a href="#三、水平居中" class="headerlink" title="三、水平居中"></a>三、水平居中</h3><h5 id="1-给固定宽度的元素设置水平居中"><a href="#1-给固定宽度的元素设置水平居中" class="headerlink" title="1.给固定宽度的元素设置水平居中"></a>1.给固定宽度的元素设置水平居中</h5><p>如果是一个固定宽度的元素，只要设置好宽度，margin的左右值为auto就行了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.center &#123;</span><br><span class="line">width: 960px;</span><br><span class="line">margin-left: auto;</span><br><span class="line">margin-right: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h5 id="2-利用inline-block实现水平居中方法"><a href="#2-利用inline-block实现水平居中方法" class="headerlink" title="2.利用inline-block实现水平居中方法"></a>2.利用inline-block实现水平居中方法</h5><p>仅inline-block属性是无法让元素水平居中，他的关键之处要在元素的父容器中设置text-align的属性为“center”，这样才能达到效果：<br>HTML代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">  &lt;title&gt;居中&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div class=&quot;center&quot;&gt;</span><br><span class="line">    我居中了</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><p>css代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.center&#123;</span><br><span class="line">  display: inline-block;</span><br><span class="line">  border:1px solid red;</span><br><span class="line">&#125;</span><br><span class="line">body&#123;</span><br><span class="line">  text-align:center;</span><br><span class="line">  background: yellow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>效果：<img src="https://upload-images.jianshu.io/upload_images/7017681-ab38c3f9c7df1c33.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="居中.png"></p><h5 id="3-利用绝对定位实现水平居中"><a href="#3-利用绝对定位实现水平居中" class="headerlink" title="3.利用绝对定位实现水平居中"></a>3.利用绝对定位实现水平居中</h5><p>HTML代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">  &lt;title&gt;居中&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div class=&quot;center&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;inner&quot;&gt;我居中了没有&lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><p>CSS代码:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">body&#123;</span><br><span class="line">  position: relative;</span><br><span class="line">  background: yellow;</span><br><span class="line">&#125;</span><br><span class="line">.center&#123;</span><br><span class="line">  position: absolute;</span><br><span class="line">  left:50%;</span><br><span class="line">&#125;</span><br><span class="line">.inner&#123;</span><br><span class="line">  border:1px solid blue;</span><br><span class="line">  position: relative;</span><br><span class="line">  float: left;</span><br><span class="line">  right: 50%;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>效果:<img src="https://upload-images.jianshu.io/upload_images/7017681-6ee00dfe558d413b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="利用绝对定位实现居中"></p><hr><h3 id="四、垂直居中"><a href="#四、垂直居中" class="headerlink" title="四、垂直居中"></a>四、垂直居中</h3><h5 id="1-利用line-height将内容垂直居中"><a href="#1-利用line-height将内容垂直居中" class="headerlink" title="1.利用line-height将内容垂直居中"></a>1.利用line-height将内容垂直居中</h5><p>这种方法前提在于字体大小不能大于line-height<br>HTML代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">  &lt;title&gt;&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"> &lt;div&gt;居中&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><p>CSS代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">div&#123;</span><br><span class="line">  border: 1px solid red;</span><br><span class="line">  font-size: 16px;</span><br><span class="line">  line-height: 40px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>也可以通过padding撑开上下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">div&#123;</span><br><span class="line">  border: 1px solid red;</span><br><span class="line">  font-size: 16px;</span><br><span class="line">  line-height: 30px;</span><br><span class="line">  padding: 5px 0px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>效果都是这样：<img src="https://upload-images.jianshu.io/upload_images/7017681-f6cb613dad8f57e7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="垂直居中.png"></p><p>未完待续。。。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一、左右布局&quot;&gt;&lt;a href=&quot;#一、左右布局&quot; class=&quot;headerlink&quot; title=&quot;一、左右布局&quot;&gt;&lt;/a&gt;一、左右布局&lt;/h3&gt;&lt;h5 id=&quot;1-float属性实现左右布局&quot;&gt;&lt;a href=&quot;#1-float属性实现左右布局&quot; class
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>HTML的一些常用标签</title>
    <link href="http://yoursite.com/2018/11/26/HTML%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E6%A0%87%E7%AD%BE/"/>
    <id>http://yoursite.com/2018/11/26/HTML的一些常用标签/</id>
    <published>2018-11-26T06:22:07.000Z</published>
    <updated>2019-03-16T15:19:48.664Z</updated>
    
    <content type="html"><![CDATA[<p>HTML，超文本标记语言（英语：HyperText Markup Language，简称：HTML）是一种用于创建网页的标准标记语言。超文本标记语言，标准通用标记语言下的一个应用。<br>“超文本”就是指页面内可以包含图片、链接等非文字元素。<br>超文本标记语言的结构包括“头”部分（英语：Head）、和“主体”部分（英语：Body），其中“头”部提供关于网页的信息，“主体”部分提供网页的[具体]内容。</p><hr><h4 id="一、最基本的HTML5结构"><a href="#一、最基本的HTML5结构" class="headerlink" title="一、最基本的HTML5结构"></a>一、最基本的HTML5结构</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt; </span><br><span class="line">&lt;head&gt; &lt;!-- head标签是所有头部元素的容器。head标签内的元素可包含脚本、样式表和提供页面的元信息等等。以下标签都可以添加到 head 部分：title、base、link、meta、script 以及style。头部的内容不会显示在浏览器的。 --&gt;</span><br><span class="line">&lt;meta charset=&quot;utf-8&quot;&gt; &lt;!-- 设置字符集，如果字符集不对，可能导致乱码。一般建议utf-8国际编码 --&gt;</span><br><span class="line">&lt;title&gt;网页标题&lt;/title&gt; &lt;!-- SEO相关标签，title定义文档的标题,百度建议一般不要超过32位,meta定义页面关键词和页面的描述--&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt; &lt;!-- 正文部分，所有在浏览器上可见的内容必须写在body标签内部 --&gt;</span><br><span class="line">    </span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>&lt;!DOCTYPE&gt; 声明必须是 HTML 文档的第一行，位于html标签之前。&lt;!DOCTYPE&gt;是指示 web 浏览器关于页面使用哪个 HTML 版本进行编写的指令，有助于浏览器中正确显示网页。其它声明方式及最新html标准可以通过以下链接学习：<br>HTML标准：<a href="https://www.w3.org/TR/html51/" target="_blank" rel="noopener">https://www.w3.org/TR/html51/</a><br>MDN：<a href="https://developer.mozilla.org/zh-CN/" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/</a></p><hr><h4 id="二、HTML常用标签基本用法"><a href="#二、HTML常用标签基本用法" class="headerlink" title="二、HTML常用标签基本用法"></a>二、HTML常用标签基本用法</h4><p>1.a标签定义超链接，指定页面间的跳转（HTTP get请求）。链接可以指向外部链接或者页面内部id锚点，可以在当前页面打开，新开窗口。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;指向的链接地址或者网址#ID名&quot; target=&quot;_blank|_self|_top|_parent&quot;&gt;谷歌&lt;/a&gt;</span><br></pre></td></tr></table></figure><p>2.form标签定义提交方式、提交地址、表单字符集以及如何对其进行编码，需要提交的表单一定要放在form标签内。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;form id=&quot;form1&quot; name=&quot;form1&quot; method=&quot;post|get&quot; action=&quot;提交到的地址&quot;&gt;&lt;/form&gt;</span><br></pre></td></tr></table></figure></p><p>3、input标签用于为基于Web的表单创建交互式控件，以便接受来自用户的数据。通常和form标签配合使用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=&quot;demo_form.asp&quot;&gt;</span><br><span class="line">  输入框: &lt;input type=&quot;text&quot; name=&quot;请输入&quot;&gt;&lt;br&gt;</span><br><span class="line">  按钮: &lt;input type=&quot;button&quot; name=&quot;按钮&quot;&gt;&lt;br&gt; &lt;!--无跳转请求--&gt;</span><br><span class="line">  &lt;input type=&quot;submit&quot; value=&quot;提交&quot;&gt; &lt;!--有跳转请求--&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure></p><p>4、button标签定义一个按钮。在 button元素内部，您可以放置内容，比如文本或图像。这是该元素与使用 input元素（空元素）创建的按钮之间的不同之处。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;button type=&quot;button&quot;&gt;点我!&lt;/button&gt;</span><br></pre></td></tr></table></figure></p><p>5、h1 - h6标签被用来定义 HTML 标题。h1定义重要等级最高的标题，h6定义登记最低的标题。从大到小排列就是这样的。h1&gt;h2&gt;h3&gt;h4&gt;h5&gt;h6<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1&gt;这是标题 1&lt;/h1&gt; </span><br><span class="line">&lt;h2&gt;这是标题 2&lt;/h2&gt; </span><br><span class="line">&lt;h3&gt;这是标题 3&lt;/h3&gt; </span><br><span class="line">&lt;h4&gt;这是标题 4&lt;/h4&gt; </span><br><span class="line">&lt;h5&gt;这是标题 5&lt;/h5&gt; </span><br><span class="line">&lt;h6&gt;这是标题 6&lt;/h6&gt;</span><br></pre></td></tr></table></figure></p><p>6、p标签定义段落<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;这是一个段落。&lt;/p&gt;</span><br></pre></td></tr></table></figure></p><p>7、hr标签定义 HTML 页面中的主题变化（比如话题的转移），并显示为一条水平线。br标签插入一个简单的换行符。两者都是空标签，没有结束符。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1&gt;HTML&lt;/h1&gt;</span><br><span class="line">&lt;p&gt;HTML 是用于描述 web 页面的一种语言。&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;hr&gt;</span><br><span class="line"></span><br><span class="line">&lt;h1&gt;CSS&lt;/h1&gt;</span><br><span class="line">&lt;p&gt;CSS 定义如何显示 HTML 元素。&lt;/p&gt;</span><br><span class="line">&lt;p&gt; </span><br><span class="line">使用 br 元素&lt;br&gt;在文本中&lt;br&gt;换行。 </span><br><span class="line">&lt;/p&gt;</span><br></pre></td></tr></table></figure></p><p>8、ul标签定义无序列表。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">&lt;li&gt;Coffee&lt;/li&gt;</span><br><span class="line">&lt;li&gt;Tea&lt;/li&gt;</span><br><span class="line">&lt;li&gt;Milk&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure></p><p>9、ol标签定义了一个有序列表，列表排序以数字来显示。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;ol&gt;</span><br><span class="line">  &lt;li&gt;一&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;二&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;三&lt;/li&gt;</span><br><span class="line">&lt;/ol&gt;</span><br></pre></td></tr></table></figure></p><p>10、small标签定义小型文本（和旁注）。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt; runoob.com - the world&apos;s largest web development site.&lt;/p&gt;</span><br><span class="line">&lt;p&gt;&lt;small&gt; Copyright 1999-2050 by Refsnes Data.&lt;/small&gt;&lt;/p&gt;</span><br></pre></td></tr></table></figure></p><p>11、strong标签定义重要的文本。有强调的作用色彩<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;strong&gt;加粗文本，强调重要性&lt;/strong&gt;</span><br></pre></td></tr></table></figure></p><p>12、div标签和span标签是html里没有语义的两个标签，在CSS中通常称为块级元素和内联元素，在html里边没有这样的说法。<br>div标签它是可用于组合其他HTML元素的容器，标签定义 HTML 文档中的一个分隔区块或者一个区域部分。通常用于文档布局，以便通过 CSS 来对这些元素进行格式化。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div style=&quot;color:#0000FF&quot;&gt;</span><br><span class="line">  &lt;h3&gt;这是一个在 div 元素中的标题。&lt;/h3&gt;</span><br><span class="line">  &lt;p&gt;这是一个在 div 元素中的文本。&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><p>13、kbd标签定义键盘文本。目前已废弃，不推荐使用，但 是可以通过CSS实现丰富的效果。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;kbd&gt;键盘输入&lt;/kbd&gt;</span><br></pre></td></tr></table></figure></p><p>14、video标签定义视频，比如电影片段或其他视频流。目前，video元素支持三种视频格式：MP4、WebM、Ogg。可以在 <video> 和 </video> 标签之间放置文本内容，这样不支持video元素的浏览器就可以显示出该标签的信息。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;video width=&quot;320&quot; height=&quot;240&quot; controls&gt;</span><br><span class="line">    &lt;source src=&quot;movie.mp4&quot; type=&quot;video/mp4&quot;&gt;</span><br><span class="line">    &lt;source src=&quot;movie.ogg&quot; type=&quot;video/ogg&quot;&gt;</span><br><span class="line">    您的浏览器不支持 video 标签。</span><br><span class="line">&lt;/video&gt;</span><br></pre></td></tr></table></figure></p><p>15、audio标签，HTML5 规定了在网页上嵌入音频元素的标准。在<audio> 与 </audio> 之间你需要插入浏览器不支持的audio元素的提示文本 。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;audio controls&gt;</span><br><span class="line">  &lt;source src=&quot;horse.ogg&quot; type=&quot;audio/ogg&quot;&gt;</span><br><span class="line">  &lt;source src=&quot;horse.mp3&quot; type=&quot;audio/mpeg&quot;&gt;</span><br><span class="line">您的浏览器不支持 audio 元素。</span><br><span class="line">&lt;/audio&gt;</span><br></pre></td></tr></table></figure></p><p>16、svg标签，SVG 文件可通过以下标签嵌入 HTML 文档：&lt;embed、object或者iframe。这样SVG的代码可以直接嵌入到HTML页面中，或您可以直接链接到SVG文件。</p><p>embed：</p><p>优势：所有主要浏览器都支持，并允许使用脚本<br>缺点：不推荐在HTML4和XHTML中使用（但在HTML5允许）<br>语法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;embed src=&quot;circle1.svg&quot; type=&quot;image/svg+xml&quot; /&gt;</span><br></pre></td></tr></table></figure></p><p>object：</p><p>优势：所有主要浏览器都支持，并支持HTML4，XHTML和HTML5标准<br>缺点：不允许使用脚本。<br>语法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;object data=&quot;circle1.svg&quot; type=&quot;image/svg+xml&quot;&gt;&lt;/object&gt;</span><br></pre></td></tr></table></figure></p><p>iframe：</p><p>优势：所有主要浏览器都支持，并允许使用脚本<br>缺点：不推荐在HTML4和XHTML中使用（但在HTML5允许）<br>语法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;iframe src=&quot;circle1.svg&quot;&gt;&lt;/iframe&gt;</span><br></pre></td></tr></table></figure></p><p>在Firefox、Internet Explorer9、谷歌Chrome和Safari中，你可以直接在HTML嵌入SVG代码。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot;&gt;</span><br><span class="line">   &lt;circle cx=&quot;100&quot; cy=&quot;50&quot; r=&quot;40&quot; stroke=&quot;black&quot; stroke-width=&quot;2&quot; fill=&quot;red&quot; /&gt;</span><br><span class="line">&lt;/svg&gt;</span><br></pre></td></tr></table></figure></p><p>17、span用标签于对文档中的元素进行组合。标签没有固定的格式表现。当对它应用样式时，它才会产生视觉上的变化。提供了一种将文本的一部分或者文档的一部分独立出来的方式。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;我的母亲是 &lt;span style=&quot;color:blue&quot;&gt;伟大&lt;/span&gt; 的。&lt;/p&gt;</span><br></pre></td></tr></table></figure></p><hr><h4 id="三、HTML注意事项"><a href="#三、HTML注意事项" class="headerlink" title="三、HTML注意事项"></a>三、HTML注意事项</h4><p>1、HTML标签和属性是不区分大小写的，建议HTML标签和属性都小写，属性值必须用双引号包围。</p><p>2、HTML标签都是以开始标签起始，以结束标签终止。大部分HTML标签都是成对出现的，称为双标签，比如：p标签、div标签，也有的HTML标签在开始标签中结束的标签，称为单标签，比如：hr标签、br标签。大多数 HTML 元素可拥有属性，文本内容都是写在开始标签与结束标签之间。</p><p>3、HTML标签之间尽量缩进与换行，每行代码不要过长，方便阅读和维护。</p><p>4、HTML标签使用必须符合标签嵌套规则。禁止a标签嵌套a标签，p标签嵌套div标签。</p><p>5、建议不使用HTML已经废弃的或者不赞成使用的标签，少使用table布局、iframe框架嵌套以及flash播放器。</p><p>以上也只是讲了一部分常用标签的用法和注意事项。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;HTML，超文本标记语言（英语：HyperText Markup Language，简称：HTML）是一种用于创建网页的标准标记语言。超文本标记语言，标准通用标记语言下的一个应用。&lt;br&gt;“超文本”就是指页面内可以包含图片、链接等非文字元素。&lt;br&gt;超文本标记语言的结构包括
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>HTTP小记</title>
    <link href="http://yoursite.com/2018/07/21/HTTP%E5%B0%8F%E8%AE%B0/"/>
    <id>http://yoursite.com/2018/07/21/HTTP小记/</id>
    <published>2018-07-21T05:05:07.000Z</published>
    <updated>2019-03-17T15:33:22.436Z</updated>
    
    <content type="html"><![CDATA[<h2 id="curl命令"><a href="#curl命令" class="headerlink" title="curl命令"></a>curl命令</h2><p>curl命令一般有三种</p><ol><li><code>curl -s -v -H &quot;colin: xxx&quot; -- &quot;https://www.baidu.com&quot;</code>这个是get</li><li><code>curl -X POST -s -v -H &quot;colin: xxx&quot; -- &quot;https://www.baidu.com&quot;</code> 与get对应的post</li><li><code>curl -X POST -d &quot;1234567890&quot; -s -v -H &quot;colin: xxx&quot; -- &quot;https://www.baidu.com&quot;</code> 添加一个上传的数据</li></ol><hr><h2 id="http请求"><a href="#http请求" class="headerlink" title="http请求"></a>http请求</h2><p>使用<code>curl -X POST -d &quot;1234567890&quot; -s -v -H &quot;colin: xxx&quot; -- &quot;https://www.baidu.com&quot;</code>发送一个请求</p><ul><li><p>请求的内容为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">POST / HTTP/1.1</span><br><span class="line">Host: www.baidu.com</span><br><span class="line">User-Agent: curl/7.54.0</span><br><span class="line">Accept: */*</span><br><span class="line">colin: xxx</span><br><span class="line">Content-Length: 10</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line"></span><br><span class="line">1234567890</span><br></pre></td></tr></table></figure></li><li><p>请求的格式为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1 动词 路径 协议/版本</span><br><span class="line">2 Key1: value1</span><br><span class="line">2 Key1: value2</span><br><span class="line">2 Key3: value3</span><br><span class="line">2 Content-Type: application/x-www-form-urlencoded</span><br><span class="line">2 Host: www.baidu.com</span><br><span class="line">2 User-Agent: curl/7.54.0</span><br><span class="line">3  </span><br><span class="line">4 要上传的数据</span><br></pre></td></tr></table></figure></li></ul><h5 id="可以看到"><a href="#可以看到" class="headerlink" title="可以看到"></a>可以看到</h5><ol><li>请求最多包含四部分，最少包含三部分。（也就是说第四部分可以为空）</li><li>第三部分永远都是一个回车（<code>\n</code>）</li><li>动词有 GET POST PUT PATCH DELETE HEAD OPTIONS 等</li><li>这里的路径包括「查询参数」，但不包括「锚点」</li><li>如果你没有写路径，那么路径默认为 /</li><li>第 2 部分中的 Content-Type 标注了第 4 部分的格式</li></ol><h5 id="用-Chrome-发请求打开-Network"><a href="#用-Chrome-发请求打开-Network" class="headerlink" title="用 Chrome 发请求打开 Network"></a>用 Chrome 发请求打开 Network</h5><ol><li>地址栏输入网址</li><li>在 Network 点击，查看 request，点击「view source」</li><li>点击「view source」</li><li>终于点了？可以看到请求的前三部分了</li><li>如果有请求的第四部分，那么在 FormData 或 Payload 里面可以看到</li></ol><hr><h2 id="http响应"><a href="#http响应" class="headerlink" title="http响应"></a>http响应</h2><p>请求了之后，一般都会得到一个响应,除非断网或者服务器宕机了</p><h5 id="响应的格式"><a href="#响应的格式" class="headerlink" title="响应的格式"></a>响应的格式</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1 协议/版本号 状态码 状态解释</span><br><span class="line">2 Key1: value1</span><br><span class="line">2 Key2: value2</span><br><span class="line">2 Content-Length: 17931</span><br><span class="line">2 Content-Type: text/html</span><br><span class="line">3</span><br><span class="line">4 要下载的内容</span><br></pre></td></tr></table></figure><p>GET 请求和 POST 请求对应的响应可以一样，也可以不一样，响应的第四部分可以很长很长很长.</p><ol><li>状态码要背，是服务器对浏览器说的话</li><li>状态解释没什么用</li><li>第 2 部分中的 Content-Type 标注了第 4 部分的格式</li><li>第 2 部分中的 Content-Type 遵循 MIME 规范<h5 id="用-Chrome-查看响应"><a href="#用-Chrome-查看响应" class="headerlink" title="用 Chrome 查看响应"></a>用 Chrome 查看响应</h5></li><li>打开 Network</li><li>输入网址</li><li>选中第一个响应</li><li>查看 Response Headers，点击「view source」</li><li>你会看到响应的前两部分</li><li>查看 Response 或者 Preview，你会看到响应的第 4 部分</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;curl命令&quot;&gt;&lt;a href=&quot;#curl命令&quot; class=&quot;headerlink&quot; title=&quot;curl命令&quot;&gt;&lt;/a&gt;curl命令&lt;/h2&gt;&lt;p&gt;curl命令一般有三种&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;curl -s -v -H &amp;quot;col
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>git小记(1)</title>
    <link href="http://yoursite.com/2018/06/24/git%E5%B0%8F%E8%AE%B0(1)/"/>
    <id>http://yoursite.com/2018/06/24/git小记(1)/</id>
    <published>2018-06-24T13:46:07.000Z</published>
    <updated>2019-03-16T15:19:15.901Z</updated>
    
    <content type="html"><![CDATA[<h2 id="git-init"><a href="#git-init" class="headerlink" title="git init"></a>git init</h2><ul><li>该命令能初始化本地仓库,在当前目录新建一个git代码库.<br><img src="https://upload-images.jianshu.io/upload_images/7017681-649e469ff7c0e457.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="如图"></li></ul><hr><h2 id="git-add"><a href="#git-add" class="headerlink" title="git add"></a>git add</h2><ul><li>git add文件路径,用来将变动加到暂存区,添加指定文件到暂存区<br><img src="https://upload-images.jianshu.io/upload_images/7017681-56b35f16c404f841.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="css目录下的所有文件都被提交到暂存区了"></li></ul><hr><h2 id="git-commit-v"><a href="#git-commit-v" class="headerlink" title="git commit -v"></a>git commit -v</h2><ul><li>提交时显示所有diff信息,diff是Unix系统的一个很重要的工具程序。它用来比较两个文本文件的差异，是代码版本管理的基石之一。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;git-init&quot;&gt;&lt;a href=&quot;#git-init&quot; class=&quot;headerlink&quot; title=&quot;git init&quot;&gt;&lt;/a&gt;git init&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;该命令能初始化本地仓库,在当前目录新建一个git代码库.&lt;br&gt;&lt;img src
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>命令行小记(1)</title>
    <link href="http://yoursite.com/2018/06/23/%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B0%8F%E8%AE%B0(1)/"/>
    <id>http://yoursite.com/2018/06/23/命令行小记(1)/</id>
    <published>2018-06-23T14:07:03.000Z</published>
    <updated>2019-03-16T15:21:45.460Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ls用法"><a href="#ls用法" class="headerlink" title="ls用法"></a>ls用法</h2><ul><li>输入ls显示当前目录下的所有文件和路径,直接输入<code>ls</code></li><li>ls某个文件列表可以显示该目录下的所有文件和路径<code>ls demo-1</code></li></ul><hr><h2 id="cat用法"><a href="#cat用法" class="headerlink" title="cat用法"></a>cat用法</h2><ul><li>cat命令由第一行显示档案内容.<code>cat 1.txt</code></li></ul><hr><h2 id="mv用法"><a href="#mv用法" class="headerlink" title="mv用法"></a>mv用法</h2><ul><li>mv源路径 目标路径,可以让该文件移动到目标路径下.</li><li>mv可以重命名或者改变文件类型,比如<code>mv 1.txt 1.md</code>. </li></ul><hr><h2 id="touch用法"><a href="#touch用法" class="headerlink" title="touch用法"></a>touch用法</h2><ul><li>touch可以创建一个文件,但不能创建目录,也可以改变文件的更新时间.直接输入<code>touch 1.txt</code></li></ul><hr><h3 id="explainshell-com"><a href="#explainshell-com" class="headerlink" title="explainshell.com"></a>explainshell.com</h3><p>该网站可以解释任何命令,输入任意命令,能解释命令里各个字母代表的意思.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;ls用法&quot;&gt;&lt;a href=&quot;#ls用法&quot; class=&quot;headerlink&quot; title=&quot;ls用法&quot;&gt;&lt;/a&gt;ls用法&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;输入ls显示当前目录下的所有文件和路径,直接输入&lt;code&gt;ls&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;ls某个文件列
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>原型与原型链</title>
    <link href="http://yoursite.com/2017/12/15/%E5%8E%9F%E5%9E%8B%E4%B8%8E%E5%8E%9F%E5%9E%8B%E9%93%BE/"/>
    <id>http://yoursite.com/2017/12/15/原型与原型链/</id>
    <published>2017-12-15T15:55:48.000Z</published>
    <updated>2019-03-18T15:26:43.784Z</updated>
    
    <content type="html"><![CDATA[<p><strong> 当声明一个对象，那么这个对象一定要找到一个公用的属性，如果没有公用的属性，那么这个对象就没啥用了，除了存数据就没有其他的价值了，有了公用属性之后，就可以调用各种API。<br>所有对象都有 <code>toString</code> 和 <code>valueOf</code>属性，那么我们是否有必要给每个对象一个 <code>toString</code> 和 <code>valueOf</code> 呢？<br>明显不需要。<br>JS 的做法是把 <code>toString</code> 和 <code>valueOf</code> 放在一个对象里（暂且叫做公用属性组成的对象）<br>然后让每一个对象的 <code>__proto__</code>存储这个「公用属性组成的对象」的地址。<br>原型就是公用属性的意思。<br>下图中公用属性通过<code>__proto__</code>串起来的像链一样的路线就是原型链。</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/7017681-564c5185f48ec5f8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="原型链"></p><p>浏览器一开始就在内存里把原型给初始化好了。如下：<br><img src="https://upload-images.jianshu.io/upload_images/7017681-00cb9ec502b37395.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="prototype原型"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var a = &#123;&#125;</span><br><span class="line">// undefined</span><br><span class="line">var b = &#123;&#125;</span><br><span class="line">// undefined</span><br><span class="line">a === b</span><br><span class="line">// false</span><br><span class="line">a.toString === b.toString</span><br><span class="line">// true</span><br></pre></td></tr></table></figure><p>上面代码能看出，<code>a</code>和<code>b</code>是两个完全不一样的对象，严格相等运算返回的结果都是<code>false</code>，但是两者的<code>toString</code>是完全一样的，因为两个对象的<code>toString</code>属性都存在同一个公用属性里。（也就是<code>Object</code>的原型里）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var a = &#123;&#125;</span><br><span class="line">// undefined</span><br><span class="line">Object.prototype</span><br><span class="line">// &#123;constructor: ƒ, __defineGetter__: ƒ, __defineSetter__: ƒ, hasOwnProperty: ƒ, __lookupGetter__: ƒ, …&#125;</span><br><span class="line">a.__proto__ === Object.prototype</span><br><span class="line">// true</span><br></pre></td></tr></table></figure><p>上面代码能看出，<code>Object.prototype</code>是<code>Object</code>的公用属性的引用（不引用就要被回收了），<code>a.__proto__</code>也是<code>Object</code>的公用属性的引用，所以严格相等返回的是<code>true</code>（必须要用公用属性）。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var n1 = new Number(1)</span><br><span class="line">// undefined</span><br><span class="line">n1.__proto__ === Number.prototype</span><br><span class="line">// true</span><br><span class="line">n1.__proto__.__proto__ === Object.prototype</span><br><span class="line">// true</span><br></pre></td></tr></table></figure></p><p>上列代码表示<code>n1</code>是一个对象，但是对象里面是一个数值<code>1</code>，所以<code>n1.__proto__</code>引用的公共属性跟<code>Number.prototype</code>引用的是同样的属性，<code>Number.prototype</code>引用的公用属性本身里面也有个<code>__proto__</code>引用<code>Object.prototype</code>引用到的公共属性（具体可以看文章开头两幅图来理解），所以<code>n1.__proto__.__proto__</code>是与<code>Object.prototype</code>严格相等的，因为引用的都是同一个公共属性。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt; 当声明一个对象，那么这个对象一定要找到一个公用的属性，如果没有公用的属性，那么这个对象就没啥用了，除了存数据就没有其他的价值了，有了公用属性之后，就可以调用各种API。&lt;br&gt;所有对象都有 &lt;code&gt;toString&lt;/code&gt; 和 &lt;code&gt;val
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JS里的数据类型转换</title>
    <link href="http://yoursite.com/2017/12/13/JS%E9%87%8C%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/"/>
    <id>http://yoursite.com/2017/12/13/JS里的数据类型转换/</id>
    <published>2017-12-13T15:22:48.000Z</published>
    <updated>2019-03-18T15:24:19.988Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、转为字符串"><a href="#一、转为字符串" class="headerlink" title="一、转为字符串"></a>一、转为字符串</h3><ol><li>toString()方法</li></ol><p>数值、字符串、对象、布尔；都有<code>toString</code>方法；这个方法唯一能做的就是返回相应的字符串；其中<code>null</code>和<code>undefined</code>没有<code>toString()</code>方法。<br><img src="https://upload-images.jianshu.io/upload_images/7017681-3c4bd0305da99f15.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="x.toString()"></p><ol start="2"><li>String(x)</li></ol><p><code>String()</code>属于强制转换， <code>null</code>转换的结果为<code>null</code>；<code>undefined</code>转换的结果为<code>undefined</code>；其余的如果有<code>toString()</code>方法，即调用该方法，返回相应的结果。<br><img src="https://upload-images.jianshu.io/upload_images/7017681-1935af757f2302af.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="String(x)"></p><ol start="3"><li>x + ‘’</li></ol><p>还有一种比较“老司机”的方法，就是任何数据类型直接 <code>+</code> 空字符串<code>&#39;&#39;</code>就行了。如下：<br><img src="https://upload-images.jianshu.io/upload_images/7017681-92fc30ce62b60eb1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="x + &#39;&#39;"></p><p>注意，如果非要将number + string，会调用number的<code>toString</code>方法，如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1 + &apos;2&apos;    相当于</span><br><span class="line">(1).toString() + &apos;2&apos;</span><br><span class="line">// &apos;12&apos;</span><br></pre></td></tr></table></figure></p><hr><h3 id="二、转为布尔"><a href="#二、转为布尔" class="headerlink" title="二、转为布尔"></a>二、转为布尔</h3><ol><li>Boolean()</li></ol><p><code>Boolean</code>函数可以将任意类型的值转为布尔值。<br>它的转换规则相对简单：除了以下五个值(5个falsy值)的转换结果为<code>false</code>，其他的值全部为<code>true</code>。</p><ul><li><code>undefined</code></li><li><code>null</code></li><li><code>-0</code>或<code>+0</code></li><li><code>NaN</code></li><li><code>&#39;&#39;</code>（空字符串）<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Boolean(undefined) // false</span><br><span class="line">Boolean(null) // false</span><br><span class="line">Boolean(0) // false</span><br><span class="line">Boolean(NaN) // false</span><br><span class="line">Boolean(&apos;&apos;) // false</span><br></pre></td></tr></table></figure></li></ul><p>所有对象（包括空对象）的转换结果都是<code>true</code>，甚至连false对应的布尔对象<code>new Boolean(false)</code>也是<code>true</code>。</p><p>2.!!x<br>还有一种比较聪明的方法就是通过<code>!</code>取反，这样的话两个感叹号<code>!!</code>就是负负得正，在一个数据类型前面加上<code>!!</code>就可以返回它本身的布尔值。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">!true // false</span><br><span class="line">!!true // true</span><br><span class="line">!!1 // true</span><br><span class="line">!!&apos;&apos; // false</span><br><span class="line">!!NaN // false</span><br></pre></td></tr></table></figure></p><hr><h3 id="三、转为数值"><a href="#三、转为数值" class="headerlink" title="三、转为数值"></a>三、转为数值</h3><p>1.Number()</p><p>使用<code>Number</code>函数，可以将任意类型的值转化成数值。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Number(&apos;1&apos;) // 1</span><br></pre></td></tr></table></figure></p><ol start="2"><li>parseInt() （经常有人问的）</li></ol><p><code>parseInt()</code> 函数解析一个字符串参数，并返回一个指定基数的整数 (数学系统的基础)。能解析多少就解析多少，一旦遇到不能解析的字符串，就立马退出返回结果。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">parseInt(&apos;1&apos;,10) // 1</span><br></pre></td></tr></table></figure></p><ol start="3"><li>parseFloat()</li></ol><p><code>parseFloat()</code> 函数解析一个字符串参数并返回一个浮点数。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">parseFloat(&quot;3.14&quot;);</span><br><span class="line">parseFloat(&quot;314e-2&quot;);</span><br><span class="line">parseFloat(&quot;0.0314E+2&quot;);</span><br><span class="line">parseFloat(&quot;3.14more non-digit characters&quot;);</span><br></pre></td></tr></table></figure></p><ol start="4"><li>x - 0 （常用也常见）</li></ol><p>一个比较聪明的方法，也是比较骚的方法。（既有<code>parseInt()</code>的功能，也有<code>parseFloat()</code>的功能）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&apos;12&apos; - 0 // 12</span><br><span class="line">&apos;1.23&apos; - 0 // 1.23</span><br></pre></td></tr></table></figure></p><ol start="5"><li>+x</li></ol><p>通过取正(取它原本的值)，来得出数值。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">+ &apos;1.23&apos; // 1.23</span><br><span class="line">+ &apos;.1&apos; // 0.1</span><br><span class="line">+ &apos;-1&apos; // -1</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一、转为字符串&quot;&gt;&lt;a href=&quot;#一、转为字符串&quot; class=&quot;headerlink&quot; title=&quot;一、转为字符串&quot;&gt;&lt;/a&gt;一、转为字符串&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;toString()方法&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;数值、字符串、对象、布尔；都有&lt;c
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>从输出URL到页面展示发生了什么</title>
    <link href="http://yoursite.com/2017/07/22/%E4%BB%8E%E8%BE%93%E5%87%BAURL%E5%88%B0%E9%A1%B5%E9%9D%A2%E5%B1%95%E7%A4%BA%E5%8F%91%E7%94%9F%E4%BA%86%E4%BB%80%E4%B9%88/"/>
    <id>http://yoursite.com/2017/07/22/从输出URL到页面展示发生了什么/</id>
    <published>2017-07-22T08:22:48.000Z</published>
    <updated>2019-03-16T15:05:33.880Z</updated>
    
    <content type="html"><![CDATA[<h2 id="URL是什么"><a href="#URL是什么" class="headerlink" title="URL是什么"></a>URL是什么</h2><ul><li><strong>URL</strong>是统一资源定位符（Uniform Resource Locator）的简称。统一资源定位符是对可以从互联网上得到的资源的位置和访问方法的一种简洁的表示，是互联网上标准资源的地址。互联网上的每个文件都有一个唯一的URL，它包含的信息指出文件的位置以及浏览器应该怎么处理它。</li><li>模式/协议（scheme）：它告诉浏览器如何处理将要打开的文件。最常用的模式是超文本传输协议（Hypertext Transfer Protocol，缩写为HTTP），这个协议可以用来访问网络。</li></ul><h2 id="域名解析"><a href="#域名解析" class="headerlink" title="域名解析"></a>域名解析</h2><p><strong>IP</strong>地址是什么：IP地址被用来给Internet上的电脑一个编号。大家日常见到的情况是每台联网的PC上都需要有IP地址，才能正常通信。我们可以把“个人电脑”比作“一台电话”，那么“IP地址”就相当于“电话号码”。<br><strong>DNS</strong>是什么：DNS（Domain Name System，域名系统），因特网上作为域名和IP地址相互映射的一个分布式数据库，能够使用户更方便的访问互联网，而不用去记住能够被机器直接读取的IP数串。通过主机名，最终得到该主机名对应的IP地址的过程叫做域名解析。</p><ul><li>浏览器缓存 – 浏览器会缓存DNS记录一段时间。</li><li>系统缓存 - 从 Hosts 文件查找是否有该域名和对应 IP。</li><li>路由器缓存 – 一般路由器也会缓存域名信息。</li><li>ISP DNS 缓存 – 比如到电信的 DNS 上查找缓存。</li><li>如果都没有找到，则向根域名服务器查找域名对应 IP，根域名服务器把请求转发到下一级，直到找到 IP。</li></ul><h2 id="服务器处理"><a href="#服务器处理" class="headerlink" title="服务器处理"></a>服务器处理</h2><p>服务器是一台安装系统的机器，常见的系统如Linux、windows server 2012。系统里安装的处理请求的应用叫 Web server。<br>Web服务器可以解析(handles)HTTP协议。当Web服务器接收到一个HTTP请求(request)，会返回一个HTTP响应(response)，例如送回一个HTML页面。为了处理一个请求(request)，Web服务器可以响应(response)一个静态页面或图片，进行页面跳转(redirect)，或者把动态响应(dynamic response)的产生委托(delegate)给一些其它的程序例如CGI脚本，JSP(JavaServer Pages)脚本，servlets，ASP(Active Server Pages)脚本，服务器端(server-side)JavaScript，或者一些其它的服务器端(server-side)技术。无论它们(译者注：脚本)的目的如何，这些服务器端(server-side)的程序通常产生一个HTML的响应(response)来让浏览器可以浏览。</p><h2 id="网站处理流程"><a href="#网站处理流程" class="headerlink" title="网站处理流程"></a>网站处理流程</h2><p><img src="http://upload-images.jianshu.io/upload_images/7017681-b013a59beffbf8b7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>##浏览器处理</p><ul><li>HTML字符串被浏览器接受后被一句句读取解析。</li><li>解析到link 标签后重新发送请求获取css。</li><li>解析到 script标签后发送请求获取 js，并执行代码。</li><li>解析到img 标签后发送请求获取图片资源。</li></ul><p>##绘制网页<br>浏览器根据 HTML 和 CSS 计算得到渲染树，绘制到屏幕上js 会被执行。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;URL是什么&quot;&gt;&lt;a href=&quot;#URL是什么&quot; class=&quot;headerlink&quot; title=&quot;URL是什么&quot;&gt;&lt;/a&gt;URL是什么&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;URL&lt;/strong&gt;是统一资源定位符（Uniform Resource Lo
      
    
    </summary>
    
    
  </entry>
  
</feed>
